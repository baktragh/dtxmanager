package dtxmanager;

import javax.swing.*;
import javax.swing.event.*;

public class MovDialog extends javax.swing.JDialog {

    /**
     * Creates new form MovDialog
     */
    public MovDialog() {
        setModal(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pMainControls = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfStart = new javax.swing.JTextField();
        jtfEnd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfTarget = new javax.swing.JTextField();
        pButtons = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Move block");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onWindowClosing(evt);
            }
        });

        pMainControls.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Block start:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        pMainControls.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Block end:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        pMainControls.add(jLabel2, gridBagConstraints);

        jtfStart.setColumns(24);
        jtfStart.setFont(new java.awt.Font("Monospaced", 0, 14));
        jtfStart.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        pMainControls.add(jtfStart, gridBagConstraints);

        jtfEnd.setColumns(24);
        jtfEnd.setFont(new java.awt.Font("Monospaced", 0, 14));
        jtfEnd.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        pMainControls.add(jtfEnd, gridBagConstraints);

        jLabel3.setText("Target adr:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        pMainControls.add(jLabel3, gridBagConstraints);

        jtfTarget.setColumns(24);
        jtfTarget.setFont(new java.awt.Font("Monospaced", 0, 14));
        jtfTarget.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        pMainControls.add(jtfTarget, gridBagConstraints);

        getContentPane().add(pMainControls, java.awt.BorderLayout.CENTER);

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        pButtons.add(btnOk);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        pButtons.add(btnCancel);

        getContentPane().add(pButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowClosing
        result = 0;
        setVisible(false);
    }//GEN-LAST:event_onWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        result = 0;
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed

        /*Zkontrolovat jestli je vstup v poradku*/
        boolean ok = true;
        this.block_start = -1;
        this.block_end = -1;
        this.target = -1;

        try {
            this.block_start = Integer.parseInt(jtfStart.getText());
            this.block_end = Integer.parseInt(jtfEnd.getText());
            this.target = Integer.parseInt(jtfTarget.getText());

        }
        catch (Exception e) {
            ok = false;
        }

        if (block_start < 0 || block_start > 65535) {
            ok = false;
        }
        if (block_end < 0 || block_end > 65535) {
            ok = false;
        }
        if (target < 0 || target > 65535) {
            ok = false;
        }
        if (block_start > block_end) {
            ok = false;
        }
        boolean overlap = false;
        int target_end = target + (block_end - block_start);
        if (target >= block_start && target <= block_end) {
            overlap = true;
        }
        if (target_end >= block_start && target_end <= block_end) {
            overlap = true;
        }

        if (ok == false) {
            JOptionPane.showMessageDialog(this, "Invalid values in fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (overlap == true) {
            JOptionPane.showMessageDialog(this, "Source area and target area overlap", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        result = 1;
        setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jtfEnd;
    private javax.swing.JTextField jtfStart;
    private javax.swing.JTextField jtfTarget;
    private javax.swing.JPanel pButtons;
    private javax.swing.JPanel pMainControls;
    // End of variables declaration//GEN-END:variables

    int result;
    private int block_start;
    private int block_end;
    private int target;

    void setValues(int src, int srcend, int tgt) {
        jtfStart.setText(Integer.toString(src));
        jtfEnd.setText(Integer.toString(srcend));
        jtfTarget.setText(Integer.toString(tgt));
    }

    int getBlockStart() {
        return block_start;
    }

    int getBlockEnd() {
        return block_end;
    }

    int getBlockTarget() {
        return target;
    }

}
