package dtxmanager;

import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import javax.swing.*;
import java.io.*;
import java.util.ArrayList;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

public class DtxFrame extends javax.swing.JFrame implements ListSelectionListener, TableModelListener {

    /**
     * Creates new form DtxFrame
     */
    public DtxFrame() {

        initComponents();
        updateColumnParams();

        this.jtbOriginal.getSelectionModel().addListSelectionListener(this);
        this.jtbModified.getSelectionModel().addListSelectionListener(this);
        this.jtbOriginal.getModel().addTableModelListener(this);
        this.jtbModified.getModel().addTableModelListener(this);
        updateEnableDisable();
    }

    void updateColumnParams() {
        this.jtbOriginal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.jtbModified.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.jtbOriginal.getColumnModel().getColumn(0).setResizable(false);
        this.jtbModified.getColumnModel().getColumn(0).setResizable(false);
        this.jtbOriginal.getColumnModel().getColumn(0).setMaxWidth(22);
        this.jtbModified.getColumnModel().getColumn(0).setMaxWidth(22);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jsppSplitter = new javax.swing.JSplitPane();
        pOriginal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbOriginal = new javax.swing.JTable();
        pOriginalCtrl = new javax.swing.JPanel();
        btnToModified = new javax.swing.JButton();
        btnReplaceByCode = new javax.swing.JButton();
        btnAddAll = new javax.swing.JButton();
        btnExportOrig = new javax.swing.JButton();
        btnExportOrigHeader = new javax.swing.JButton();
        btnOriginalComment = new javax.swing.JButton();
        pModified = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbModified = new javax.swing.JTable();
        pModifiedCtrl = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnAdr = new javax.swing.JButton();
        btnExportModif = new javax.swing.JButton();
        btnExportModifHeader = new javax.swing.JButton();
        btnImportRaw = new javax.swing.JButton();
        btnImportHeadered = new javax.swing.JButton();
        btnPlusRun = new javax.swing.JButton();
        btnPlusInit = new javax.swing.JButton();
        btnComment = new javax.swing.JButton();
        btnClr = new javax.swing.JButton();
        btnAddMove = new javax.swing.JButton();
        btnSplit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniLoad = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mniQuit = new javax.swing.JMenuItem();
        mnuProject = new javax.swing.JMenu();
        mniPurify = new javax.swing.JMenuItem();
        mniTurboVersion = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mniLoadProject = new javax.swing.JMenuItem();
        mniSaveProject = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        mniExport = new javax.swing.JMenuItem();
        mnuSection = new javax.swing.JMenu();
        mniRun2Init = new javax.swing.JMenuItem();
        mniMerge = new javax.swing.JMenuItem();
        mniLdaSta = new javax.swing.JMenuItem();
        jmiReplaceRunInit = new javax.swing.JMenuItem();
        mniChangeMove = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        mniHexaEdit = new javax.swing.JMenuItem();
        mniCopyArray = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jmiSplitEvenly = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mniAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DTX Manager 1.5");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jsppSplitter.setResizeWeight(1.0);
        jsppSplitter.setContinuousLayout(true);
        jsppSplitter.setOneTouchExpandable(true);

        pOriginal.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Section buffer ( )"));
        pOriginal.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(344, 403));

        jtbOriginal.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jtbOriginal.setModel(DtxManager.ae1);
        jScrollPane1.setViewportView(jtbOriginal);

        pOriginal.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pOriginalCtrl.setLayout(new java.awt.GridBagLayout());

        btnToModified.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnToModified.setText(">");
        btnToModified.setToolTipText("Add selected sections to the project");
        btnToModified.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnToModified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToModifiedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        pOriginalCtrl.add(btnToModified, gridBagConstraints);

        btnReplaceByCode.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnReplaceByCode.setText("LD/ST>");
        btnReplaceByCode.setToolTipText("<html>\nAdd LDA/STA replacement of selected section to project<br>\nThis may be useful for replacing small sections at unwanted locations.<br>\nTo activate the replacement, make INIT jump to the first address of replacement<br>\n</html>");
        btnReplaceByCode.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnReplaceByCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceByCodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pOriginalCtrl.add(btnReplaceByCode, gridBagConstraints);

        btnAddAll.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnAddAll.setText(">>");
        btnAddAll.setToolTipText("Add all sections to the project");
        btnAddAll.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pOriginalCtrl.add(btnAddAll, gridBagConstraints);

        btnExportOrig.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnExportOrig.setText("EXP H-");
        btnExportOrig.setToolTipText("Export selected sections, only data without headers");
        btnExportOrig.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnExportOrig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportOrigActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pOriginalCtrl.add(btnExportOrig, gridBagConstraints);

        btnExportOrigHeader.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnExportOrigHeader.setText("EXP H+");
        btnExportOrigHeader.setToolTipText("<html>Export selected sections including<br>\nsection headers</html>");
        btnExportOrigHeader.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnExportOrigHeader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportOrigHeaderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pOriginalCtrl.add(btnExportOrigHeader, gridBagConstraints);

        btnOriginalComment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnOriginalComment.setText("CMT");
        btnOriginalComment.setToolTipText("Add comment to the selected section");
        btnOriginalComment.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnOriginalComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOriginalCommentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pOriginalCtrl.add(btnOriginalComment, gridBagConstraints);

        pOriginal.add(pOriginalCtrl, java.awt.BorderLayout.EAST);

        jsppSplitter.setLeftComponent(pOriginal);

        pModified.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Project ( )"));
        pModified.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(344, 403));

        jtbModified.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jtbModified.setModel(DtxManager.ae2);
        jScrollPane2.setViewportView(jtbModified);

        pModified.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pModifiedCtrl.setLayout(new java.awt.GridBagLayout());

        btnRemove.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnRemove.setText("DEL");
        btnRemove.setToolTipText("Delete selected sections");
        btnRemove.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnRemove, gridBagConstraints);

        btnUp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnUp.setText("UP");
        btnUp.setToolTipText("<html>\nMove 1 section up<br>\nSHIFT - move 1 section 10 steps up<br>\n</html>");
        btnUp.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnUp, gridBagConstraints);

        btnDown.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnDown.setText("DOWN");
        btnDown.setToolTipText("<html>\nMove 1 section down<br>\nSHIFT - move 1 section 10 steps down<br>\n</html>");
        btnDown.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnDown, gridBagConstraints);

        btnAdr.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnAdr.setText("ADR");
        btnAdr.setToolTipText("Change address of selected section");
        btnAdr.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnAdr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnAdr, gridBagConstraints);

        btnExportModif.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnExportModif.setText("EXP H-");
        btnExportModif.setToolTipText("Export selected sections without headers");
        btnExportModif.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnExportModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportModifActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnExportModif, gridBagConstraints);

        btnExportModifHeader.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnExportModifHeader.setText("EXP H+");
        btnExportModifHeader.setToolTipText("Export selected sections with headers");
        btnExportModifHeader.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnExportModifHeader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportModifHeaderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnExportModifHeader, gridBagConstraints);

        btnImportRaw.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnImportRaw.setText("IMP H-");
        btnImportRaw.setToolTipText("Import section from file which contains raw data");
        btnImportRaw.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnImportRaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportRawActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnImportRaw, gridBagConstraints);

        btnImportHeadered.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnImportHeadered.setText("IMP H+");
        btnImportHeadered.setToolTipText("Import section or sections from file with section headers");
        btnImportHeadered.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnImportHeadered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportHeaderedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnImportHeadered, gridBagConstraints);

        btnPlusRun.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnPlusRun.setText("+RUN");
        btnPlusRun.setToolTipText("<html>\nAdd RUN section<br>\nSHIFT - jump address will be set to the first selected section\n</html>");
        btnPlusRun.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnPlusRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusRunActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnPlusRun, gridBagConstraints);

        btnPlusInit.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnPlusInit.setText("+INIT");
        btnPlusInit.setToolTipText("<html>\nAdd INIT section<br>\nSHIFT - jump address will be set to the first selected section<br>\n</html>");
        btnPlusInit.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnPlusInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusInitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnPlusInit, gridBagConstraints);

        btnComment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnComment.setText("CMT");
        btnComment.setToolTipText("Add comment to the selected section");
        btnComment.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnComment, gridBagConstraints);

        btnClr.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnClr.setText("CLR");
        btnClr.setToolTipText("Clear all sections");
        btnClr.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnClr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnClr, gridBagConstraints);

        btnAddMove.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnAddMove.setText("+MVB");
        btnAddMove.setToolTipText("<html>\nAdd a section with subroutine that moves a memory block.<br>\nThe subroutine also disables ROM, so the block can be moved to RAM under ROM<br>\nSHIFT - preset the address textfields using address of the first selected section<br>\nTo activate the subroutine, add an INIT jump to first address of the subroutine\n</html>\n");
        btnAddMove.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnAddMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnAddMove, gridBagConstraints);

        btnSplit.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnSplit.setText("SPL");
        btnSplit.setToolTipText("Split the first selected section");
        btnSplit.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSplitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 1);
        pModifiedCtrl.add(btnSplit, gridBagConstraints);

        pModified.add(pModifiedCtrl, java.awt.BorderLayout.SOUTH);

        jsppSplitter.setRightComponent(pModified);

        getContentPane().add(jsppSplitter);

        jMenuBar1.setMargin(new java.awt.Insets(2, 0, 2, 0));

        mnuFile.setMnemonic('F');
        mnuFile.setText("File");

        mniLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        mniLoad.setMnemonic('L');
        mniLoad.setText("Load XEX to buffer");
        mniLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadActionPerformed(evt);
            }
        });
        mnuFile.add(mniLoad);
        mnuFile.add(jSeparator1);

        mniQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mniQuit.setMnemonic('Q');
        mniQuit.setText("Quit");
        mniQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniQuitActionPerformed(evt);
            }
        });
        mnuFile.add(mniQuit);

        jMenuBar1.add(mnuFile);

        mnuProject.setMnemonic('P');
        mnuProject.setText("Project");
        mnuProject.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        mniPurify.setMnemonic('P');
        mniPurify.setText("Purify project");
        mniPurify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPurifyActionPerformed(evt);
            }
        });
        mnuProject.add(mniPurify);

        mniTurboVersion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        mniTurboVersion.setMnemonic('t');
        mniTurboVersion.setText("Make monolithic binary...");
        mniTurboVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMakeTurboVersion(evt);
            }
        });
        mnuProject.add(mniTurboVersion);
        mnuProject.add(jSeparator4);

        mniLoadProject.setText("Load project...");
        mniLoadProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadProjectActionPerformed(evt);
            }
        });
        mnuProject.add(mniLoadProject);

        mniSaveProject.setText("Save project...");
        mniSaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveProjectActionPerformed(evt);
            }
        });
        mnuProject.add(mniSaveProject);
        mnuProject.add(jSeparator2);

        mniExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniExport.setMnemonic('E');
        mniExport.setText("Export project to XEX...");
        mniExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExportActionPerformed(evt);
            }
        });
        mnuProject.add(mniExport);

        jMenuBar1.add(mnuProject);

        mnuSection.setMnemonic('S');
        mnuSection.setText("Section");

        mniRun2Init.setText("RUN2INIT or INIT2RUN");
        mniRun2Init.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                on_run2init(evt);
            }
        });
        mnuSection.add(mniRun2Init);

        mniMerge.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        mniMerge.setMnemonic('g');
        mniMerge.setText("Merge selected sections");
        mniMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMergeSelected(evt);
            }
        });
        mnuSection.add(mniMerge);

        mniLdaSta.setText("Replace section with LDA/STA code");
        mniLdaSta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLdaStaActionPerformed(evt);
            }
        });
        mnuSection.add(mniLdaSta);

        jmiReplaceRunInit.setText("Replace RUN/INIT with code...");
        jmiReplaceRunInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiReplaceRunInitActionPerformed(evt);
            }
        });
        mnuSection.add(jmiReplaceRunInit);

        mniChangeMove.setMnemonic('m');
        mniChangeMove.setText("Change moveblock...");
        mniChangeMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniChangeMoveActionPerformed(evt);
            }
        });
        mnuSection.add(mniChangeMove);
        mnuSection.add(jSeparator7);

        mniHexaEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        mniHexaEdit.setMnemonic('H');
        mniHexaEdit.setText("Hexadecimal view...");
        mniHexaEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onHexaEdit(evt);
            }
        });
        mnuSection.add(mniHexaEdit);

        mniCopyArray.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        mniCopyArray.setText("Copy section as C array");
        mniCopyArray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCopyAsCArray(evt);
            }
        });
        mnuSection.add(mniCopyArray);
        mnuSection.add(jSeparator6);

        jmiSplitEvenly.setText("Split section evenly...");
        jmiSplitEvenly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSplitEvenlyActionPerformed(evt);
            }
        });
        mnuSection.add(jmiSplitEvenly);

        jMenuBar1.add(mnuSection);

        mnuHelp.setMnemonic('H');
        mnuHelp.setText("Help");

        mniAbout.setMnemonic('A');
        mniAbout.setText("About...");
        mniAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAboutActionPerformed(evt);
            }
        });
        mnuHelp.add(mniAbout);

        jMenuBar1.add(mnuHelp);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniChangeMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniChangeMoveActionPerformed
        int idx = jtbModified.getSelectedRow();
        if (idx == -1) {
            return;
        }

        Section s = DtxManager.ae2.getSection(idx);
        if (s.type != Section.MOVEBLOCK_SECTION) {
            JOptionPane.showMessageDialog(this, "Not a moveblock section");
            return;
        }

        DtxManager.dlgMov.setValues(s.mvbStart, s.mvbEnd, s.mvbTarget);
        DtxManager.dlgMov.setVisible(true);
        int r = DtxManager.dlgMov.result;
        if (r == 0) {
            return;
        }

        int s1 = DtxManager.dlgMov.getBlockStart();
        int t1 = DtxManager.dlgMov.getBlockTarget();
        int l1 = DtxManager.dlgMov.getBlockEnd() - s1 + 1;
        saveSelection();
        DtxManager.ae2.getAllSections().set(idx, DtxManager.ae2.createMoveBlockSection(s.start, s1, t1, l1));
        DtxManager.ae2.fireTableDataChanged();
        restoreSelection();
    }//GEN-LAST:event_mniChangeMoveActionPerformed

    private void mniAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAboutActionPerformed
        JOptionPane.showMessageDialog(this, "<HTML>DTX Manager 1.5<BR>Interactive binary load file editor<BR>by BAHA Software</HTML>");

    }//GEN-LAST:event_mniAboutActionPerformed

    private void mniSaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveProjectActionPerformed
        /*Show the dialog*/
        int o = DtxManager.fcProject.showSaveDialog(this);
        /*Get the file*/
        File f = DtxManager.fcProject.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }
        try {
            DtxManager.saveProject(f.getAbsolutePath());
        }
        catch (Exception e) {
            warning(e);
        }
    }//GEN-LAST:event_mniSaveProjectActionPerformed

    private void mniLoadProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadProjectActionPerformed
        /*Show the dialog*/
        int o = DtxManager.fcProject.showOpenDialog(this);
        /*Get the file*/
        File f = DtxManager.fcProject.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }
        try {
            DtxManager.loadProject(f.getAbsolutePath());
        }
        catch (Exception e) {
            warning(e);
        }
    }//GEN-LAST:event_mniLoadProjectActionPerformed

    private void on_run2init(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_on_run2init
        int idx = jtbModified.getSelectedRow();
        if (idx == -1) {
            return;
        }

        Section s = DtxManager.ae2.getSection(idx);
        if (s.type == Section.INIT_SECTION || s.type == Section.RUN_SECTION) {
            if (s.type == Section.INIT_SECTION) {
                s.type = Section.RUN_SECTION;
                s.start = 736;
                s.stop = 737;
            }
            else {
                s.type = Section.INIT_SECTION;
                s.start = 738;
                s.stop = 739;
            }
            saveSelection();
            DtxManager.ae2.fireTableDataChanged();
            restoreSelection();
        }
        else {
            warning("This can be applied to RUN or INIT section only");
        }
    }//GEN-LAST:event_on_run2init

    private void mniPurifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPurifyActionPerformed
        int i = JOptionPane.showConfirmDialog(this, "<HTML>This will:<BR>- Split all RUNINIT sections<BR> - Move all RUN sections to the end<br>Are you sure ?</HTML>", "Confirm", JOptionPane.YES_NO_OPTION);
        if (i != JOptionPane.YES_OPTION) {
            return;
        }
        DtxManager.ae2.purify();

    }//GEN-LAST:event_mniPurifyActionPerformed

    private void btnSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSplitActionPerformed

        int idx = jtbModified.getSelectedRow();
        if (idx == -1) {
            return;
        }
        Section s = DtxManager.ae2.getSection(idx);
        if (s.type == Section.INIT_SECTION || s.type == Section.RUN_SECTION) {
            warning("It is not possible to split INIT or RUN section !");
            return;
        }
        if (s.type == Section.COMMON_SECTION) {
            String nwnm = JOptionPane.showInputDialog(this, "First address of 2nd part:", Integer.toString(s.stop));
            if (nwnm == null) {
                return;
            }

            int fosp;
            try {
                fosp = Integer.parseInt(nwnm);
                saveSelection();
                DtxManager.ae2.splitSection(idx, fosp);
                restoreSelection();
            }
            catch (Exception e) {
                this.warning(e);
                return;
            }
            return;
        }

        if (s.type == Section.RUNINIT_SECTION) {
            try {
                saveSelection();
                DtxManager.ae2.splitSection(idx, 0);
                restoreSelection();
            }
            catch (Exception e) {
                this.warning(e);
            }
        }

    }//GEN-LAST:event_btnSplitActionPerformed

    private void btnAddMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMoveActionPerformed
        int badr1 = 0;
        int badr2 = 0;

        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && jtbModified.getSelectedRow() != -1) {
            Section js = DtxManager.ae2.getSection(jtbModified.getSelectedRow());
            badr1 = js.start;
            badr2 = js.stop;
        }

        DtxManager.dlgMov.setValues(badr1, badr2, 30000);
        DtxManager.dlgMov.setVisible(true);

        if (DtxManager.dlgMov.result == 1) {
            int s = DtxManager.dlgMov.getBlockStart();
            int t = DtxManager.dlgMov.getBlockTarget();
            int l = DtxManager.dlgMov.getBlockEnd() - s + 1;
            saveSelection();
            DtxManager.ae2.addMoveBlockSection(10000, s, t, l);
            restoreSelection();
        }
    }//GEN-LAST:event_btnAddMoveActionPerformed

    private void mniQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniQuitActionPerformed
        DtxManager.programExit();

    }//GEN-LAST:event_mniQuitActionPerformed

    private void btnClrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClrActionPerformed
        int i = JOptionPane.showConfirmDialog(this, "Are you sure you want to clear all sections ?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (i == JOptionPane.YES_OPTION) {
            this.jtbModified.selectAll();
            this.btnRemoveActionPerformed(evt);
        }
    }//GEN-LAST:event_btnClrActionPerformed

    private void btnImportHeaderedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportHeaderedActionPerformed

        int o = DtxManager.fcSection.showOpenDialog(this);
        /*Get the file*/
        File f = DtxManager.fcSection.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        try {
            DtxManager.ae2.importHeaderedData(f.getAbsolutePath());
        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);
        }

    }//GEN-LAST:event_btnImportHeaderedActionPerformed

    private void btnImportRawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportRawActionPerformed

        int o = DtxManager.fcSection.showOpenDialog(this);
        /*Get the file*/
        File f = DtxManager.fcSection.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        try {
            DtxManager.ae2.importRawSection(f.getAbsolutePath());
        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);
        }
    }//GEN-LAST:event_btnImportRawActionPerformed

    private void btnOriginalCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOriginalCommentActionPerformed

        int idx = jtbOriginal.getSelectedRow();
        if (idx == -1) {
            return;
        }
        Section s = DtxManager.ae1.getSection(idx);
        String cmt = JOptionPane.showInputDialog(this, "Specify comment:", s.comment);

        if (cmt != null) {
            DtxManager.ae1.setComment(idx, cmt);
        }
    }//GEN-LAST:event_btnOriginalCommentActionPerformed

    private void btnReplaceByCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceByCodeActionPerformed

        int idx = jtbOriginal.getSelectedRow();
        if (idx == -1) {
            return;
        }

        Section s = DtxManager.ae1.createCodeFrom(idx);
        DtxManager.ae2.addSection(s);

    }//GEN-LAST:event_btnReplaceByCodeActionPerformed
    /*Will add comment to first selected section*/
    private void btnCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommentActionPerformed

        int idx = jtbModified.getSelectedRow();
        if (idx == -1) {
            return;
        }
        Section s = DtxManager.ae2.getSection(idx);
        String cmt = JOptionPane.showInputDialog(this, "Specify comment:", s.comment);
        saveSelection();
        if (cmt != null) {
            DtxManager.ae2.setComment(idx, cmt);
        }
        restoreSelection();

    }//GEN-LAST:event_btnCommentActionPerformed
    /*Will add INIT section*/
    private void btnPlusInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusInitActionPerformed

        int badr = 0;
        int tag = -1;
        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && jtbModified.getSelectedRow() != -1) {
            Section js = DtxManager.ae2.getSection(jtbModified.getSelectedRow());
            badr = js.start;
            tag = jtbModified.getSelectedRow();

        }

        Section ns = new Section(738, 739, Section.INIT_SECTION, badr, 0);
        DtxManager.dlgAdr.setMode(Section.INIT_SECTION);
        DtxManager.dlgAdr.setValues(ns.start, ns.stop, ns.jump, ns.jump2, 2);
        DtxManager.dlgAdr.setVisible(true);

        if (DtxManager.dlgAdr.result == 1) {
            ns.jump = DtxManager.dlgAdr.getJump();
            saveSelection();
            if (tag == -1) {
                DtxManager.ae2.addSection(ns);
            }
            else {
                DtxManager.ae2.addSection(ns, tag + 1);
            }
            restoreSelection();

        }

    }//GEN-LAST:event_btnPlusInitActionPerformed

    /*Will add RUN section*/
    private void btnPlusRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusRunActionPerformed

        int badr = 0;
        int tag = -1;

        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && jtbModified.getSelectedRow() != -1) {
            Section js = DtxManager.ae2.getSection(jtbModified.getSelectedRow());
            badr = js.start;
            tag = jtbModified.getSelectedRow();
        }

        Section ns = new Section(736, 737, Section.RUN_SECTION, badr, 0);
        DtxManager.dlgAdr.setMode(Section.RUN_SECTION);
        DtxManager.dlgAdr.setValues(ns.start, ns.stop, ns.jump, ns.jump2, 2);
        DtxManager.dlgAdr.setVisible(true);

        if (DtxManager.dlgAdr.result == 1) {
            ns.jump = DtxManager.dlgAdr.getJump();
            saveSelection();
            if (tag == -1) {
                DtxManager.ae2.addSection(ns);
            }
            else {
                DtxManager.ae2.addSection(ns, tag + 1);
            }
            restoreSelection();
        }

    }//GEN-LAST:event_btnPlusRunActionPerformed

    /*Will move one section down*/
    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        int[] ids = jtbModified.getSelectedRows();
        if (ids.length != 1) {
            JOptionPane.showMessageDialog(this, "You can move exactly 1 section at once", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int step = 1;
        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
            step = 10;
        }

        int ni = DtxManager.ae2.moveDown(ids[0], step);
        jtbModified.getSelectionModel().setSelectionInterval(ni, ni);

    }//GEN-LAST:event_btnDownActionPerformed

    /*Will move one section up*/
    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        int[] ids = jtbModified.getSelectedRows();
        if (ids.length != 1) {
            JOptionPane.showMessageDialog(this, "You can move exactly 1 section at once", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int step = 1;
        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
            step = 10;
        }

        int ni = DtxManager.ae2.moveUp(ids[0], step);

        jtbModified.getSelectionModel().setSelectionInterval(ni, ni);

    }//GEN-LAST:event_btnUpActionPerformed

    /*Will change address*/
    private void btnAdrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdrActionPerformed

        int idx = jtbModified.getSelectedRow();
        if (idx < 0) {
            return;
        }

        Section s = DtxManager.ae2.getSection(idx);

        DtxManager.dlgAdr.setMode(s.type);
        DtxManager.dlgAdr.setValues(s.start, s.stop, s.jump, s.jump2, s.getDataLength());
        DtxManager.dlgAdr.setVisible(true);

        if (DtxManager.dlgAdr.result == 0) {
            return;
        }
        s.start = DtxManager.dlgAdr.getStart();
        s.stop = DtxManager.dlgAdr.getEnd();
        s.jump = DtxManager.dlgAdr.getJump();
        s.jump2 = DtxManager.dlgAdr.getJump2();

        DtxManager.ae2.fireTableDataChanged();

        this.jtbModified.getSelectionModel().setSelectionInterval(idx, idx);

    }//GEN-LAST:event_btnAdrActionPerformed

    /*Will export selected sections in modified without headers*/
    private void btnExportModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportModifActionPerformed
        int o = DtxManager.fcSection.showSaveDialog(this);
        /*Get the file*/
        File f = DtxManager.fcSection.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        /*What is selected*/
        int[] ids = jtbModified.getSelectedRows();

        try {
            DtxManager.ae2.saveFile(f.getAbsolutePath(), ids, false);
        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);
        }
    }//GEN-LAST:event_btnExportModifActionPerformed

    /*Will export selected sections in modified with headers*/
    private void btnExportModifHeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportModifHeaderActionPerformed
        int o = DtxManager.fcSection.showSaveDialog(this);
        /*Get the file*/
        File f = DtxManager.fcSection.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        /*What is selected*/
        int[] ids = jtbModified.getSelectedRows();

        try {
            DtxManager.ae2.saveFile(f.getAbsolutePath(), ids, true);
        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);
        }
    }//GEN-LAST:event_btnExportModifHeaderActionPerformed

    /*Will export selected sections in original without headers*/
    private void btnExportOrigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportOrigActionPerformed
        int o = DtxManager.fcSection.showSaveDialog(this);
        /*Get the file*/
        File f = DtxManager.fcSection.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        /*What is selected*/
        int[] ids = jtbOriginal.getSelectedRows();

        try {
            DtxManager.ae1.saveFile(f.getAbsolutePath(), ids, false);
        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);
        }
    }//GEN-LAST:event_btnExportOrigActionPerformed

    /*Will export selected sections in original with headers*/
    private void btnExportOrigHeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportOrigHeaderActionPerformed
        int o = DtxManager.fcSection.showSaveDialog(this);
        /*Get the file*/
        File f = DtxManager.fcSection.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        /*What is selected*/
        int[] ids = jtbOriginal.getSelectedRows();

        try {
            DtxManager.ae1.saveFile(f.getAbsolutePath(), ids, true);
        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);
        }

    }//GEN-LAST:event_btnExportOrigHeaderActionPerformed

    /*Will add all sections from original to modified*/
    private void btnAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllActionPerformed

        int p = DtxManager.ae1.getSectionCount();
        for (int i = 0; i < p; i++) {
            DtxManager.moveSectionToMofidied(DtxManager.ae1.getSection(i));
        }

    }//GEN-LAST:event_btnAddAllActionPerformed

    /*Will save modified*/
    private void mniExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExportActionPerformed
        /*Show the dialog*/
        int o = DtxManager.fcModXex.showSaveDialog(this);
        /*Get the file*/
        File f = DtxManager.fcModXex.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        /*Exporting all sections*/
        int[] si = new int[DtxManager.ae2.getSectionCount()];
        for (int k = 0; k < si.length; k++) {
            si[k] = k;
        }

        /*Save it*/
        try {
            DtxManager.ae2.saveFile(f.getAbsolutePath(), si, true);
            TitledBorder tb = (TitledBorder) pModified.getBorder();
            tb.setTitle("Project (" + f.getName() + ")");
            pModified.repaint();

        }
        catch (Exception e) {
            e.printStackTrace();
            warning(e);

        }
    }//GEN-LAST:event_mniExportActionPerformed

    /*Will remove selected sections*/
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        /*What is selected*/
        int[] ids = jtbModified.getSelectedRows();

        /*Delete it*/
        for (int i = 0; i < ids.length; i++) {
            DtxManager.removeSection(ids[i] - i);
        }

    }//GEN-LAST:event_btnRemoveActionPerformed

    /*Will add all selected sections to modified*/
    private void btnToModifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToModifiedActionPerformed

        /*What is selected*/
        int[] ids = jtbOriginal.getSelectedRows();

        /*Move it*/
        for (int i = 0; i < ids.length; i++) {
            DtxManager.moveSectionToMofidied(DtxManager.ae1.getSection(ids[i]));
        }

    }//GEN-LAST:event_btnToModifiedActionPerformed

    /*Will load executable*/
    private void mniLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadActionPerformed

        /*Show the dialog*/
        int o = DtxManager.fcXex.showOpenDialog(this);
        /*Get the file*/
        File f = DtxManager.fcXex.getSelectedFile();
        if (o != JFileChooser.APPROVE_OPTION || f == null) {
            return;
        }

        DtxManager.ae1.clear();
        DtxManager.ae1.setFileName(f.getAbsolutePath());
        try {
            DtxManager.ae1.analyze(true);
            this.jtbOriginal.setModel(DtxManager.ae1);
            updateColumnParams();
            TitledBorder tb = (TitledBorder) pOriginal.getBorder();
            tb.setTitle("Section buffer (" + f.getName() + ")");
            pOriginal.repaint();
        }
        catch (Exception e) {
            e.printStackTrace();
            DtxManager.ae1.clear();
            TitledBorder tb = (TitledBorder) pOriginal.getBorder();
            tb.setTitle("Section buffer ( )");
            pOriginal.repaint();
            warning(e);

        }

    }//GEN-LAST:event_mniLoadActionPerformed

    private void onMakeTurboVersion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onMakeTurboVersion
        DtxManager.dlgTurbo.setVisible(true);
    }//GEN-LAST:event_onMakeTurboVersion

    private void onMergeSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onMergeSelected
        try {
            DtxManager.ae2.mergeSections(jtbModified.getSelectedRows());
        }
        catch (Exception e) {
            warning(e);
        }

    }//GEN-LAST:event_onMergeSelected

    private void mniLdaStaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLdaStaActionPerformed
        int idx = jtbModified.getSelectedRow();
        Section s = null;
        if (idx >= 0) {
            s = DtxManager.ae2.createCodeFrom(idx);
            DtxManager.ae2.deleteSection(idx);
            DtxManager.ae2.addSection(s, idx);
        }

    }//GEN-LAST:event_mniLdaStaActionPerformed

    private void onHexaEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onHexaEdit
        int idx = jtbModified.getSelectedRow();
        if (idx < 0) {
            return;
        }
        DtxManager.frmHexa.showWithData(DtxManager.ae2.getSection(idx).data);
    }//GEN-LAST:event_onHexaEdit

    private void onWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowClosing
        DtxManager.programExit();
    }//GEN-LAST:event_onWindowClosing

    private void onCopyAsCArray(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCopyAsCArray
        int idx = jtbModified.getSelectedRow();
        if (idx < 0) {
            return;
        }
        String ca = DtxManager.ae2.getSection(idx).getDataAsCArray();
        Toolkit tk = Toolkit.getDefaultToolkit();
        tk.getSystemClipboard().setContents(new StringSelection(ca), null);

    }//GEN-LAST:event_onCopyAsCArray

    private void jmiSplitEvenlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSplitEvenlyActionPerformed

        /*Validate conditions*/
        int numSel = jtbModified.getSelectedRowCount();
        if (numSel < 1) {
            return;
        }
        if (numSel > 2) {
            warning("Only 1 section can be split evenly at a time");
            return;
        }

        int oldIndex = jtbModified.getSelectedRow();

        Section oldSect = DtxManager.ae2.getSection(oldIndex);
        if (oldSect.type != Section.COMMON_SECTION) {
            warning("Only common section can be split evenly");
            return;
        }

        /*Ask for the number of pieces*/
        String sNumPieces = JOptionPane.showInputDialog(this, "How many pieces", "Split section evenly", JOptionPane.QUESTION_MESSAGE);
        if (sNumPieces == null) {
            return;
        }

        int numPieces = 1;
        try {
            numPieces = Integer.parseInt(sNumPieces);
        }
        catch (NumberFormatException nfe) {
            warning("Enter decimal number greater than 0");
            return;
        }

        /*Now we have the number of pieces*/
        if (numPieces > oldSect.getDataLength() || numPieces < 1) {
            warning("The number of pieces is either less than one or greater than number of bytes (" + oldSect.getDataLength() + ") in the section");
        }

        int dataLength = oldSect.getDataLength();
        int pieceSize = oldSect.getDataLength() / numPieces;

        /*Create new sections*/
        ArrayList<Section> newSections = new ArrayList<>();

        int address = oldSect.start;
        int bytesRemaining = dataLength;

        /*The main part*/
        for (int i = 0; i < numPieces - 1; i++) {
            Section newSect = new Section(address, address + pieceSize - 1, Section.COMMON_SECTION);
            newSect.data = new int[pieceSize];
            System.arraycopy(oldSect.data, address - oldSect.start, newSect.data, 0, pieceSize);
            bytesRemaining -= pieceSize;
            address += pieceSize;
            newSections.add(newSect);
        }
        /*The last section*/
        Section newSect = new Section(address, address + bytesRemaining - 1, Section.COMMON_SECTION);
        newSect.data = new int[bytesRemaining];
        System.arraycopy(oldSect.data, address - oldSect.start, newSect.data, 0, bytesRemaining);
        newSections.add(newSect);

        int aIndex = oldIndex + 1;

        for (Section aSect : newSections) {
            DtxManager.ae2.addSection(aSect, aIndex);
            aIndex++;
        }
        DtxManager.ae2.deleteSection(oldIndex);

    }//GEN-LAST:event_jmiSplitEvenlyActionPerformed

    private void jmiReplaceRunInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiReplaceRunInitActionPerformed

        /*Check number of selected*/
        int[] indexes = jtbModified.getSelectedRows();
        if (indexes.length < 1) {
            return;
        }

        /*Place sections in list, only those jump ones*/
        ArrayList<Section> sectList = new ArrayList<>();
        for (int k : indexes) {
            Section s = DtxManager.ae2.getSection(k);
            if (s.type == Section.INIT_SECTION || s.type == Section.RUN_SECTION
                    || s.type == Section.RUNINIT_SECTION) {
                sectList.add(s);
            }
        }

        /*Check if any jump sections prepared*/
        if (sectList.isEmpty()) {
            warning("No INIT, RUN, or RUNINIT sections were selected");
            return;
        }

        /*Ask for address*/
        String sAddr = JOptionPane.showInputDialog(this, "Enter address of the code", "Address", JOptionPane.QUESTION_MESSAGE);
        if (sAddr == null) {
            return;
        }

        int address = 0;
        try {
            address = Integer.parseInt(sAddr);
            if (address < 0 || address > 65535) {
                throw new NumberFormatException();
            }
        }
        catch (NumberFormatException nfe) {
            warning("Invalid address specified. Specify (0-65535).");
            return;
        }

        ArrayList<Integer> code = new ArrayList<>();

        /*Check if all of them are jump ones*/
        for (Section section : sectList) {

            switch (section.type) {
                case Section.INIT_SECTION:
                case Section.RUN_SECTION: {
                    code.add(0x20);
                    code.add(section.jump % 256);
                    code.add(section.jump / 256);
                    break;
                }
                case Section.RUNINIT_SECTION: {
                    code.add(0x20);
                    code.add(section.jump % 256);
                    code.add(section.jump / 256);
                    code.add(0x20);
                    code.add(section.jump2 % 256);
                    code.add(section.jump2 / 256);
                    break;
                }
            }
        }

        /*Create a section*/
        Section newSect = new Section(address, address + code.size() - 1, Section.COMMON_SECTION);
        int[] dta = new int[code.size()];
        for (int i = 0; i < dta.length; i++) {
            dta[i] = code.get(i);
        }
        newSect.data = dta;

        /*Append a section*/
        DtxManager.ae2.addSection(newSect);

    }//GEN-LAST:event_jmiReplaceRunInitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DtxFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAll;
    private javax.swing.JButton btnAddMove;
    private javax.swing.JButton btnAdr;
    private javax.swing.JButton btnClr;
    private javax.swing.JButton btnComment;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnExportModif;
    private javax.swing.JButton btnExportModifHeader;
    private javax.swing.JButton btnExportOrig;
    private javax.swing.JButton btnExportOrigHeader;
    private javax.swing.JButton btnImportHeadered;
    private javax.swing.JButton btnImportRaw;
    private javax.swing.JButton btnOriginalComment;
    private javax.swing.JButton btnPlusInit;
    private javax.swing.JButton btnPlusRun;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReplaceByCode;
    private javax.swing.JButton btnSplit;
    private javax.swing.JButton btnToModified;
    private javax.swing.JButton btnUp;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JMenuItem jmiReplaceRunInit;
    private javax.swing.JMenuItem jmiSplitEvenly;
    private javax.swing.JSplitPane jsppSplitter;
    private javax.swing.JTable jtbModified;
    private javax.swing.JTable jtbOriginal;
    private javax.swing.JMenuItem mniAbout;
    private javax.swing.JMenuItem mniChangeMove;
    private javax.swing.JMenuItem mniCopyArray;
    private javax.swing.JMenuItem mniExport;
    private javax.swing.JMenuItem mniHexaEdit;
    private javax.swing.JMenuItem mniLdaSta;
    private javax.swing.JMenuItem mniLoad;
    private javax.swing.JMenuItem mniLoadProject;
    private javax.swing.JMenuItem mniMerge;
    private javax.swing.JMenuItem mniPurify;
    private javax.swing.JMenuItem mniQuit;
    private javax.swing.JMenuItem mniRun2Init;
    private javax.swing.JMenuItem mniSaveProject;
    private javax.swing.JMenuItem mniTurboVersion;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenu mnuProject;
    private javax.swing.JMenu mnuSection;
    private javax.swing.JPanel pModified;
    private javax.swing.JPanel pModifiedCtrl;
    private javax.swing.JPanel pOriginal;
    private javax.swing.JPanel pOriginalCtrl;
    // End of variables declaration//GEN-END:variables

    void warning(Exception e) {
        StringBuffer sb = new StringBuffer("<HTML>");
        sb.append(e.getClass().getName());
        e.printStackTrace();
        if (e.getMessage() != null) {

            sb.append(':');
            sb.append("<BR>");
            sb.append(e.getMessage());
            sb.append("</HTML>");

        }
        JOptionPane.showMessageDialog(this, sb.toString(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    void warning(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
    }

    int[] selectionBackup = null;

    void saveSelection() {
        selectionBackup = this.jtbModified.getSelectedRows();
    }

    void restoreSelection() {
        if (selectionBackup == null) {
            return;
        }
        for (int k = 0; k < selectionBackup.length; k++) {
            this.jtbModified.getSelectionModel().addSelectionInterval(selectionBackup[k], selectionBackup[k]);
        }
    }

    /*Aktualizace pristupnosti prvku*/
    void updateEnableDisable() {

        int leftSel = jtbOriginal.getSelectedRowCount();
        int leftCount = jtbOriginal.getRowCount();
        int rightSel = jtbModified.getSelectedRowCount();
        int rightCount = jtbModified.getRowCount();

        /*Left all disable*/
        btnAddAll.setEnabled(false);
        btnToModified.setEnabled(false);
        btnReplaceByCode.setEnabled(false);
        btnOriginalComment.setEnabled(false);
        btnExportOrig.setEnabled(false);
        btnExportOrigHeader.setEnabled(false);
        /*Left, some enable*/
        if (leftCount > 0) {
            btnAddAll.setEnabled(true);
        }
        if (leftSel > 0) {
            btnToModified.setEnabled(true);
            btnExportOrig.setEnabled(true);
            btnExportOrigHeader.setEnabled(true);
        }
        if (leftSel == 1) {
            btnOriginalComment.setEnabled(true);
            btnReplaceByCode.setEnabled(true);
        }

        /*Right, all disable*/
        btnAdr.setEnabled(false);
        btnComment.setEnabled(false);
        btnUp.setEnabled(false);
        btnDown.setEnabled(false);
        btnExportModif.setEnabled(false);
        btnExportModifHeader.setEnabled(false);
        //btnImportRaw.setEnabled(false);
        //btnImportHeadered.setEnabled(false);
        //btnPlusInit.setEnabled(false);
        //btnPlusRun.setEnabled(false);
        //btnAddMove.setEnabled(false);
        btnSplit.setEnabled(false);
        btnRemove.setEnabled(false);
        btnClr.setEnabled(false);
        mniPurify.setEnabled(false);
        mniTurboVersion.setEnabled(false);
        mniChangeMove.setEnabled(false);
        mniRun2Init.setEnabled(false);
        mniMerge.setEnabled(false);
        mniLdaSta.setEnabled(false);
        mniHexaEdit.setEnabled(false);
        mniCopyArray.setEnabled(false);
        jmiSplitEvenly.setEnabled(false);
        jmiReplaceRunInit.setEnabled(false);

        if (rightSel > 1) {
            mniMerge.setEnabled(true);
        }

        if (rightSel > 0) {
            btnAdr.setEnabled(true);
            btnExportModif.setEnabled(true);
            btnExportModifHeader.setEnabled(true);
            btnRemove.setEnabled(true);
            jmiReplaceRunInit.setEnabled(true);
        }

        if (rightSel == 1) {
            btnUp.setEnabled(true);
            btnDown.setEnabled(true);
            btnComment.setEnabled(true);
            btnSplit.setEnabled(true);
            this.mniChangeMove.setEnabled(true);
            mniRun2Init.setEnabled(true);
            mniLdaSta.setEnabled(true);
            mniHexaEdit.setEnabled(true);
            mniCopyArray.setEnabled(true);
            jmiSplitEvenly.setEnabled(true);
        }

        if (rightCount > 0) {
            btnClr.setEnabled(true);
            mniPurify.setEnabled(true);
            mniTurboVersion.setEnabled(true);
        }

    }

    @Override
    public void valueChanged(ListSelectionEvent arg0) {
        updateEnableDisable();
    }

    @Override
    public void tableChanged(TableModelEvent arg0) {
        updateEnableDisable();
    }

    /**
     * Nastavi rozlozeni prvku podle konfigurace
     */
    void setElementsLayout(int[] leftCols, int[] rightCols, int[] frameBounds, int dividerLocation) {
        for (int i = 0; i < 4; i++) {
            jtbOriginal.getColumnModel().getColumn(i).setPreferredWidth(leftCols[i]);
            jtbModified.getColumnModel().getColumn(i).setPreferredWidth(rightCols[i]);
        }

        Rectangle bnds = new Rectangle(frameBounds[0], frameBounds[1], frameBounds[2], frameBounds[3]);
        this.setBounds(bnds);

        jsppSplitter.setDividerLocation(dividerLocation);
    }

    void getElementsLayout(int[] leftCols, int[] rightCols, int[] frameBounds, int[] dividerLocation) {
        for (int i = 0; i < 4; i++) {
            leftCols[i] = jtbOriginal.getColumnModel().getColumn(i).getWidth();
            rightCols[i] = jtbModified.getColumnModel().getColumn(i).getWidth();
        }

        Rectangle bnds = this.getBounds();
        frameBounds[0] = (int) bnds.getX();
        frameBounds[1] = (int) bnds.getY();
        frameBounds[2] = (int) bnds.getWidth();
        frameBounds[3] = (int) bnds.getHeight();

        dividerLocation[0] = jsppSplitter.getDividerLocation();
    }

}
